{"version":3,"sources":["Components/Home.js","Components/About.js","Components/Projects/NodeJS.js","Components/Projects/ProjectsHome.js","Components/Projects/ProjectsReact.js","Components/Projects.js","App.js","serviceWorker.js","index.js"],"names":["Home","Component","About","NodeJS","ProjectsHome","ProjectsReact","Projects","to","exact","path","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mTAEqBA,E,iLAEjB,OACI,0C,GAH0BC,aCAbC,E,iLAEjB,OACI,2C,GAH2BD,aCAdE,E,iLAEjB,OACI,0C,GAH4BF,aCAfG,E,iLAEjB,OACI,mD,GAHkCH,aCArBI,E,iLAEjB,OACI,2C,GAHmCJ,aCStBK,E,iLAEjB,OACU,kBAAC,IAAD,KACR,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,iBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,WAAT,WAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,kBAAT,mBAGJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAAI,kBAAC,EAAD,OACtB,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,WAAU,kBAAC,EAAD,OAC5B,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,kBAAiB,kBAAC,EAAD,a,GAlBLR,aCwBvBS,MAvBf,WACE,OACE,kBAAC,IAAD,KACE,4BACE,4BACE,kBAAC,IAAD,CAAMH,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,aAAT,cAGJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAAI,kBAAC,EAAD,OACtB,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,UAAS,kBAAC,EAAD,OAC3B,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,aAAY,kBAAC,EAAD,UCjBlBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1be1e147.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Home extends Component {\r\nrender(){\r\n    return(\r\n        <div> Home</div>\r\n    )\r\n}\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class About extends Component {\r\nrender(){\r\n    return(\r\n        <div> About</div>\r\n    )\r\n}\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class NodeJS extends Component {\r\nrender(){\r\n    return(\r\n        <div> Node</div>\r\n    )\r\n}\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class ProjectsHome extends Component {\r\nrender(){\r\n    return(\r\n        <div> Projects Home</div>\r\n    )\r\n}\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class ProjectsReact extends Component {\r\nrender(){\r\n    return(\r\n        <div> React</div>\r\n    )\r\n}\r\n}","import React, { Component } from 'react'\r\nimport { BrowserRouter as Router,\r\n    Route,\r\n    Switch,\r\n    Link\r\n  } from 'react-router-dom'\r\n  \r\n import NodeJS from './Projects/NodeJS';\r\n import PorjectsHome from './Projects/ProjectsHome';\r\n import ProjectsReact  from './Projects/ProjectsReact';\r\n\r\nexport default class Projects extends Component {\r\nrender(){\r\n    return(\r\n              <Router>\r\n      <ul>\r\n        <li>\r\n          <Link to=\"/\">ProjectsHome</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/NodeJS\">NodeJS</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/ProjectsReact\">ProjectsReact</Link>\r\n        </li>\r\n      </ul>\r\n      <Switch>\r\n        <Route exact path=\"/\"><PorjectsHome /></Route>\r\n        <Route exact path=\"/NodeJS\"><NodeJS /></Route>\r\n        <Route exact path=\"/ProjectsReact\"><ProjectsReact /></Route>\r\n      </Switch>\r\n    </Router>\r\n    )\r\n}\r\n}","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router,\n  Route,\n  Switch,\n  Link\n} from 'react-router-dom'\n\nimport Home from './Components/Home'\nimport About from './Components/About'\nimport Projects from './Components/Projects'\n\nfunction App() {\n  return (\n    <Router>\n      <ul>\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n        <li>\n          <Link to=\"/About\">About</Link>\n        </li>\n        <li>\n          <Link to=\"/Projects\">Projects</Link>\n        </li>\n      </ul>\n      <Switch>\n        <Route exact path=\"/\"><Home /></Route>\n        <Route exact path=\"/About\"><About /></Route>\n        <Route exact path=\"/Projects\"><Projects /></Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}